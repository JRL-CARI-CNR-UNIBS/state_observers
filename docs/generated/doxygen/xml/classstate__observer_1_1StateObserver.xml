<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="classstate__observer_1_1StateObserver" kind="class" language="C++" prot="public" abstract="yes">
    <compoundname>state_observer::StateObserver</compoundname>
    <derivedcompoundref refid="classstate__observer_1_1KalmanFilter" prot="public" virt="non-virtual">state_observer::KalmanFilter</derivedcompoundref>
    <derivedcompoundref refid="classstate__observer_1_1Luenberger" prot="public" virt="non-virtual">state_observer::Luenberger</derivedcompoundref>
    <includes refid="state__observer_8hpp" local="no">state_observer.hpp</includes>
      <sectiondef kind="protected-attrib">
      <memberdef kind="variable" id="classstate__observer_1_1StateObserver_1af3f080b718a6ef61a64c7e862048c44f" prot="protected" static="no" mutable="no">
        <type>Eigen::MatrixXd</type>
        <definition>Eigen::MatrixXd state_observer::StateObserver::A_</definition>
        <argsstring></argsstring>
        <name>A_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/state_observers/state_observer.hpp" line="162" column="19" bodyfile="include/state_observers/state_observer.hpp" bodystart="162" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classstate__observer_1_1StateObserver_1a09055e588ba4c8f22db835009438aa77" prot="protected" static="no" mutable="no">
        <type>Eigen::MatrixXd</type>
        <definition>Eigen::MatrixXd state_observer::StateObserver::B_</definition>
        <argsstring></argsstring>
        <name>B_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/state_observers/state_observer.hpp" line="162" column="22" bodyfile="include/state_observers/state_observer.hpp" bodystart="162" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classstate__observer_1_1StateObserver_1a308ca363bbc642804080ffdd82838b2d" prot="protected" static="no" mutable="no">
        <type>Eigen::MatrixXd</type>
        <definition>Eigen::MatrixXd state_observer::StateObserver::C_</definition>
        <argsstring></argsstring>
        <name>C_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/state_observers/state_observer.hpp" line="162" column="25" bodyfile="include/state_observers/state_observer.hpp" bodystart="162" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classstate__observer_1_1StateObserver_1a0cfe3e7379d3b3750f9d00b46bdf8c05" prot="protected" static="no" mutable="no">
        <type>Eigen::MatrixXd</type>
        <definition>Eigen::MatrixXd state_observer::StateObserver::D_</definition>
        <argsstring></argsstring>
        <name>D_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/state_observers/state_observer.hpp" line="162" column="28" bodyfile="include/state_observers/state_observer.hpp" bodystart="162" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classstate__observer_1_1StateObserver_1a231625c9e7ceb8b5b43b97470c27a29e" prot="protected" static="no" mutable="no">
        <type>Eigen::VectorXd</type>
        <definition>Eigen::VectorXd state_observer::StateObserver::x_</definition>
        <argsstring></argsstring>
        <name>x_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/state_observers/state_observer.hpp" line="163" column="19" bodyfile="include/state_observers/state_observer.hpp" bodystart="163" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classstate__observer_1_1StateObserver_1a5b4446347b32faad520b80620b98c542" prot="protected" static="no" mutable="no">
        <type>Eigen::VectorXd</type>
        <definition>Eigen::VectorXd state_observer::StateObserver::y_</definition>
        <argsstring></argsstring>
        <name>y_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/state_observers/state_observer.hpp" line="163" column="22" bodyfile="include/state_observers/state_observer.hpp" bodystart="163" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classstate__observer_1_1StateObserver_1a3723847df0f121e25d0042438c7125c0" prot="protected" static="no" mutable="no">
        <type>bool</type>
        <definition>bool state_observer::StateObserver::initialized_</definition>
        <argsstring></argsstring>
        <name>initialized_</name>
        <initializer>= false</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/state_observers/state_observer.hpp" line="164" column="8" bodyfile="include/state_observers/state_observer.hpp" bodystart="164" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classstate__observer_1_1StateObserver_1af7f4758be22113043bcf627614c72b2c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>state_observer::StateObserver::StateObserver</definition>
        <argsstring>(const Eigen::MatrixXd &amp;A, const Eigen::MatrixXd &amp;B, const Eigen::MatrixXd &amp;C, const Eigen::MatrixXd &amp;D, const Eigen::VectorXd &amp;initial_state)</argsstring>
        <name>StateObserver</name>
        <param>
          <type>const Eigen::MatrixXd &amp;</type>
          <declname>A</declname>
        </param>
        <param>
          <type>const Eigen::MatrixXd &amp;</type>
          <declname>B</declname>
        </param>
        <param>
          <type>const Eigen::MatrixXd &amp;</type>
          <declname>C</declname>
        </param>
        <param>
          <type>const Eigen::MatrixXd &amp;</type>
          <declname>D</declname>
        </param>
        <param>
          <type>const Eigen::VectorXd &amp;</type>
          <declname>initial_state</declname>
        </param>
        <briefdescription>
<para>Constructor with full state-space matrices and initial state. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>A</parametername>
</parameternamelist>
<parameterdescription>
<para>State transition matrix (n x n). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>B</parametername>
</parameternamelist>
<parameterdescription>
<para>Input matrix (n x p). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>C</parametername>
</parameternamelist>
<parameterdescription>
<para>Output matrix (q x n). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>D</parametername>
</parameternamelist>
<parameterdescription>
<para>Feedthrough matrix (q x p). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>initial_state</parametername>
</parameternamelist>
<parameterdescription>
<para>Initial state vector (n x 1).</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>std::invalid_argument</parametername>
</parameternamelist>
<parameterdescription>
<para>if dimensions are inconsistent. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/state_observers/state_observer.hpp" line="45" column="3"/>
      </memberdef>
      <memberdef kind="function" id="classstate__observer_1_1StateObserver_1af264a05c2165ad46ac0a791fc0d81345" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>state_observer::StateObserver::StateObserver</definition>
        <argsstring>(const Eigen::MatrixXd &amp;A, const Eigen::MatrixXd &amp;B, const Eigen::MatrixXd &amp;C, const Eigen::VectorXd &amp;initial_state)</argsstring>
        <name>StateObserver</name>
        <param>
          <type>const Eigen::MatrixXd &amp;</type>
          <declname>A</declname>
        </param>
        <param>
          <type>const Eigen::MatrixXd &amp;</type>
          <declname>B</declname>
        </param>
        <param>
          <type>const Eigen::MatrixXd &amp;</type>
          <declname>C</declname>
        </param>
        <param>
          <type>const Eigen::VectorXd &amp;</type>
          <declname>initial_state</declname>
        </param>
        <briefdescription>
<para>Constructor without feedthrough matrix D. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>A</parametername>
</parameternamelist>
<parameterdescription>
<para>State transition matrix (n x n). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>B</parametername>
</parameternamelist>
<parameterdescription>
<para>Input matrix (n x p). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>C</parametername>
</parameternamelist>
<parameterdescription>
<para>Output matrix (q x n). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>initial_state</parametername>
</parameternamelist>
<parameterdescription>
<para>Initial state vector (n x 1).</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>std::invalid_argument</parametername>
</parameternamelist>
<parameterdescription>
<para>if dimensions are inconsistent. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/state_observers/state_observer.hpp" line="60" column="3"/>
      </memberdef>
      <memberdef kind="function" id="classstate__observer_1_1StateObserver_1ab7c5cc9c2fe24acf92f418d698f1e080" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>state_observer::StateObserver::StateObserver</definition>
        <argsstring>(const Eigen::MatrixXd &amp;A, const Eigen::MatrixXd &amp;B, const Eigen::MatrixXd &amp;C)</argsstring>
        <name>StateObserver</name>
        <param>
          <type>const Eigen::MatrixXd &amp;</type>
          <declname>A</declname>
        </param>
        <param>
          <type>const Eigen::MatrixXd &amp;</type>
          <declname>B</declname>
        </param>
        <param>
          <type>const Eigen::MatrixXd &amp;</type>
          <declname>C</declname>
        </param>
        <briefdescription>
<para>Constructor without initial state and feedthrough matrix D. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>A</parametername>
</parameternamelist>
<parameterdescription>
<para>State transition matrix (n x n). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>B</parametername>
</parameternamelist>
<parameterdescription>
<para>Input matrix (n x p). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>C</parametername>
</parameternamelist>
<parameterdescription>
<para>Output matrix (q x n).</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>std::invalid_argument</parametername>
</parameternamelist>
<parameterdescription>
<para>if dimensions are inconsistent. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/state_observers/state_observer.hpp" line="74" column="3"/>
      </memberdef>
      <memberdef kind="function" id="classstate__observer_1_1StateObserver_1aaa7ed3fc92876429b6b91ce90e42b9d6" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>state_observer::StateObserver::StateObserver</definition>
        <argsstring>()</argsstring>
        <name>StateObserver</name>
        <briefdescription>
<para>Default constructor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/state_observers/state_observer.hpp" line="81" column="3" bodyfile="include/state_observers/state_observer.hpp" bodystart="81" bodyend="81"/>
      </memberdef>
      <memberdef kind="function" id="classstate__observer_1_1StateObserver_1a528b2c8fda31403a5de854f06b423498" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>state_observer::StateObserver::~StateObserver</definition>
        <argsstring>()</argsstring>
        <name>~StateObserver</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/state_observers/state_observer.hpp" line="83" column="3" bodyfile="include/state_observers/state_observer.hpp" bodystart="83" bodyend="83"/>
      </memberdef>
      <memberdef kind="function" id="classstate__observer_1_1StateObserver_1a862bfeb79def6189ad6446dd023781a8" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>virtual void state_observer::StateObserver::set_parameters</definition>
        <argsstring>(const StateObserverParam::SharedPtr state_observer_params)</argsstring>
        <name>set_parameters</name>
        <reimplementedby refid="classstate__observer_1_1KalmanFilter_1a3be4d2de5926eb3e611dc601adc9a595">set_parameters</reimplementedby>
        <reimplementedby refid="classstate__observer_1_1Luenberger_1a990ad8246d6da844e8facd76bac5d948">set_parameters</reimplementedby>
        <param>
          <type>const StateObserverParam::SharedPtr</type>
          <declname>state_observer_params</declname>
        </param>
        <briefdescription>
<para>Set the parameters of the state observer. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>state_observer_params</parametername>
</parameternamelist>
<parameterdescription>
<para>Shared pointer to <computeroutput><ref refid="classstate__observer_1_1StateObserverParam" kindref="compound">StateObserverParam</ref></computeroutput>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/state_observers/state_observer.hpp" line="90" column="16" bodyfile="include/state_observers/state_observer.hpp" bodystart="90" bodyend="90"/>
      </memberdef>
      <memberdef kind="function" id="classstate__observer_1_1StateObserver_1ac3ae192893b2899e47dcf6a572924dc1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void state_observer::StateObserver::initialize</definition>
        <argsstring>(const Eigen::VectorXd &amp;initial_state)</argsstring>
        <name>initialize</name>
        <param>
          <type>const Eigen::VectorXd &amp;</type>
          <declname>initial_state</declname>
        </param>
        <briefdescription>
<para>Initialize the state observer with an initial state. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>initial_state</parametername>
</parameternamelist>
<parameterdescription>
<para>Initial state vector (n x 1).</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>std::invalid_argument</parametername>
</parameternamelist>
<parameterdescription>
<para>if <computeroutput>initial_state</computeroutput> size is incorrect. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/state_observers/state_observer.hpp" line="100" column="8"/>
      </memberdef>
      <memberdef kind="function" id="classstate__observer_1_1StateObserver_1ac6328e22b68efe1f038d7d275aabe0f1" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>Eigen::VectorXd</type>
        <definition>virtual Eigen::VectorXd state_observer::StateObserver::open_loop_update</definition>
        <argsstring>()</argsstring>
        <name>open_loop_update</name>
        <reimplementedby refid="classstate__observer_1_1KalmanFilter_1aef744a50f9a03b27df8edc02b3a648dd">open_loop_update</reimplementedby>
        <briefdescription>
<para>Perform an open-loop update of the observer. </para>
        </briefdescription>
        <detaileddescription>
<para>Updates the state <computeroutput>x_</computeroutput> using the state transition matrix <computeroutput>A_</computeroutput> without considering any input or measurement.</para>
<para><simplesect kind="return"><para>Updated output vector <computeroutput>y_</computeroutput>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/state_observers/state_observer.hpp" line="109" column="27"/>
      </memberdef>
      <memberdef kind="function" id="classstate__observer_1_1StateObserver_1a07062cefef35b9ec7bf7fc812e82e826" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>Eigen::MatrixXd</type>
        <definition>virtual Eigen::MatrixXd state_observer::StateObserver::update</definition>
        <argsstring>(const Eigen::VectorXd &amp;measurement)=0</argsstring>
        <name>update</name>
        <reimplementedby refid="classstate__observer_1_1KalmanFilter_1a27ada2e6b5ee4efbf3bc6f1781413d80">update</reimplementedby>
        <reimplementedby refid="classstate__observer_1_1Luenberger_1aeef08b1e109c369246e440f7bf92f3e2">update</reimplementedby>
        <param>
          <type>const Eigen::VectorXd &amp;</type>
          <declname>measurement</declname>
        </param>
        <briefdescription>
<para>Update the observer with a measurement. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>measurement</parametername>
</parameternamelist>
<parameterdescription>
<para>Measurement vector. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Updated state estimate. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/state_observers/state_observer.hpp" line="117" column="27"/>
      </memberdef>
      <memberdef kind="function" id="classstate__observer_1_1StateObserver_1ab3bf488d4abc29ad203d5a566018aabd" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>Eigen::MatrixXd</type>
        <definition>virtual Eigen::MatrixXd state_observer::StateObserver::update</definition>
        <argsstring>(const Eigen::VectorXd &amp;measurement, const Eigen::VectorXd &amp;input)=0</argsstring>
        <name>update</name>
        <reimplementedby refid="classstate__observer_1_1KalmanFilter_1a5a69f399dc513a1b55650de63900eb3f">update</reimplementedby>
        <reimplementedby refid="classstate__observer_1_1Luenberger_1ad514f468dbfa4e073232e1438c55176a">update</reimplementedby>
        <param>
          <type>const Eigen::VectorXd &amp;</type>
          <declname>measurement</declname>
        </param>
        <param>
          <type>const Eigen::VectorXd &amp;</type>
          <declname>input</declname>
        </param>
        <briefdescription>
<para>Update the observer with a measurement and input. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>measurement</parametername>
</parameternamelist>
<parameterdescription>
<para>Measurement vector. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>input</parametername>
</parameternamelist>
<parameterdescription>
<para>Input vector. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Updated state estimate. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/state_observers/state_observer.hpp" line="126" column="27"/>
      </memberdef>
      <memberdef kind="function" id="classstate__observer_1_1StateObserver_1ac9bce8f25518d27fe05e5a76b024892f" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>Eigen::VectorXd</type>
        <definition>Eigen::VectorXd state_observer::StateObserver::get_state</definition>
        <argsstring>() const</argsstring>
        <name>get_state</name>
        <briefdescription>
<para>Get the current state estimate. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Current state vector <computeroutput>x_</computeroutput>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/state_observers/state_observer.hpp" line="135" column="26" bodyfile="include/state_observers/state_observer.hpp" bodystart="135" bodyend="135"/>
      </memberdef>
      <memberdef kind="function" id="classstate__observer_1_1StateObserver_1a65034cb07db2a389bdcff3eaf4c6fa6f" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>Eigen::VectorXd</type>
        <definition>Eigen::VectorXd state_observer::StateObserver::get_output</definition>
        <argsstring>() const</argsstring>
        <name>get_output</name>
        <briefdescription>
<para>Get the current output estimate. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Current output vector <computeroutput>y_</computeroutput>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/state_observers/state_observer.hpp" line="142" column="26" bodyfile="include/state_observers/state_observer.hpp" bodystart="142" bodyend="142"/>
      </memberdef>
      <memberdef kind="function" id="classstate__observer_1_1StateObserver_1aa25df9ccd2ebf9c553455d1116efb1e4" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool state_observer::StateObserver::is_initialized</definition>
        <argsstring>() const</argsstring>
        <name>is_initialized</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/state_observers/state_observer.hpp" line="144" column="15" bodyfile="include/state_observers/state_observer.hpp" bodystart="144" bodyend="144"/>
      </memberdef>
      <memberdef kind="function" id="classstate__observer_1_1StateObserver_1aabe418247e711fa2d375f602dc5b6dc2" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>Eigen::VectorXd</type>
        <definition>virtual Eigen::VectorXd state_observer::StateObserver::get_state_variance</definition>
        <argsstring>()</argsstring>
        <name>get_state_variance</name>
        <reimplementedby refid="classstate__observer_1_1KalmanFilter_1a6f86415ca604956468ad7e7863ea257d">get_state_variance</reimplementedby>
        <briefdescription>
<para>Get the variance of the state estimate. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>std::runtime_error</parametername>
</parameternamelist>
<parameterdescription>
<para>if not implemented. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>State variance vector. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/state_observers/state_observer.hpp" line="152" column="27" bodyfile="include/state_observers/state_observer.hpp" bodystart="152" bodyend="152"/>
      </memberdef>
      <memberdef kind="function" id="classstate__observer_1_1StateObserver_1ab6e27d39c167150821b7cdfb543e06db" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void state_observer::StateObserver::set_state_transition_matrix</definition>
        <argsstring>(const Eigen::MatrixXd &amp;A)</argsstring>
        <name>set_state_transition_matrix</name>
        <param>
          <type>const Eigen::MatrixXd &amp;</type>
          <declname>A</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/state_observers/state_observer.hpp" line="153" column="8"/>
      </memberdef>
      <memberdef kind="function" id="classstate__observer_1_1StateObserver_1ae4f32a27873521e6058caa53de1771b0" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>Eigen::MatrixXd</type>
        <definition>Eigen::MatrixXd state_observer::StateObserver::get_A</definition>
        <argsstring>() const</argsstring>
        <name>get_A</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/state_observers/state_observer.hpp" line="155" column="26" bodyfile="include/state_observers/state_observer.hpp" bodystart="155" bodyend="155"/>
      </memberdef>
      <memberdef kind="function" id="classstate__observer_1_1StateObserver_1a411e66ea4d02a57c2e8af6e7a99b9756" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>Eigen::MatrixXd</type>
        <definition>Eigen::MatrixXd state_observer::StateObserver::get_B</definition>
        <argsstring>() const</argsstring>
        <name>get_B</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/state_observers/state_observer.hpp" line="156" column="26" bodyfile="include/state_observers/state_observer.hpp" bodystart="156" bodyend="156"/>
      </memberdef>
      <memberdef kind="function" id="classstate__observer_1_1StateObserver_1a794bbe83b0a35dd79d1201d3690bff4b" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>Eigen::MatrixXd</type>
        <definition>Eigen::MatrixXd state_observer::StateObserver::get_C</definition>
        <argsstring>() const</argsstring>
        <name>get_C</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/state_observers/state_observer.hpp" line="157" column="26" bodyfile="include/state_observers/state_observer.hpp" bodystart="157" bodyend="157"/>
      </memberdef>
      <memberdef kind="function" id="classstate__observer_1_1StateObserver_1a7137173a3e445f8f5dfaea0690641158" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>Eigen::MatrixXd</type>
        <definition>Eigen::MatrixXd state_observer::StateObserver::get_D</definition>
        <argsstring>() const</argsstring>
        <name>get_D</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/state_observers/state_observer.hpp" line="158" column="26" bodyfile="include/state_observers/state_observer.hpp" bodystart="158" bodyend="158"/>
      </memberdef>
      <memberdef kind="function" id="classstate__observer_1_1StateObserver_1a799b4a02f065423beb563700ea6d9ed4" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>Eigen::VectorXd</type>
        <definition>Eigen::VectorXd state_observer::StateObserver::get_initial_state</definition>
        <argsstring>() const</argsstring>
        <name>get_initial_state</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/state_observers/state_observer.hpp" line="159" column="26" bodyfile="include/state_observers/state_observer.hpp" bodystart="159" bodyend="159"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-func">
      <memberdef kind="function" id="classstate__observer_1_1StateObserver_1a2eb5e2ed964d80974046edc36444e818" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void state_observer::StateObserver::dimensions_check</definition>
        <argsstring>(const Eigen::MatrixXd &amp;A, const Eigen::MatrixXd &amp;B, const Eigen::MatrixXd &amp;C, const Eigen::MatrixXd &amp;D, const Eigen::VectorXd &amp;initial_state)</argsstring>
        <name>dimensions_check</name>
        <param>
          <type>const Eigen::MatrixXd &amp;</type>
          <declname>A</declname>
        </param>
        <param>
          <type>const Eigen::MatrixXd &amp;</type>
          <declname>B</declname>
        </param>
        <param>
          <type>const Eigen::MatrixXd &amp;</type>
          <declname>C</declname>
        </param>
        <param>
          <type>const Eigen::MatrixXd &amp;</type>
          <declname>D</declname>
        </param>
        <param>
          <type>const Eigen::VectorXd &amp;</type>
          <declname>initial_state</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/state_observers/state_observer.hpp" line="166" column="8"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>A generic state observer class for linear systems. </para>
    </briefdescription>
    <detaileddescription>
<para>The <computeroutput><ref refid="classstate__observer_1_1StateObserver" kindref="compound">StateObserver</ref></computeroutput> class provides methods for initializing and updating the state of a linear system observer defined by state-space matrices (A, B, C, D) and an initial state vector. </para>
    </detaileddescription>
    <inheritancegraph>
      <node id="2">
        <label>state_observer::KalmanFilter</label>
        <link refid="classstate__observer_1_1KalmanFilter"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3">
        <label>state_observer::Luenberger</label>
        <link refid="classstate__observer_1_1Luenberger"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1">
        <label>state_observer::StateObserver</label>
        <link refid="classstate__observer_1_1StateObserver"/>
      </node>
    </inheritancegraph>
    <location file="include/state_observers/state_observer.hpp" line="31" column="1" bodyfile="include/state_observers/state_observer.hpp" bodystart="32" bodyend="171"/>
    <listofallmembers>
      <member refid="classstate__observer_1_1StateObserver_1af3f080b718a6ef61a64c7e862048c44f" prot="protected" virt="non-virtual"><scope>state_observer::StateObserver</scope><name>A_</name></member>
      <member refid="classstate__observer_1_1StateObserver_1a09055e588ba4c8f22db835009438aa77" prot="protected" virt="non-virtual"><scope>state_observer::StateObserver</scope><name>B_</name></member>
      <member refid="classstate__observer_1_1StateObserver_1a308ca363bbc642804080ffdd82838b2d" prot="protected" virt="non-virtual"><scope>state_observer::StateObserver</scope><name>C_</name></member>
      <member refid="classstate__observer_1_1StateObserver_1a0cfe3e7379d3b3750f9d00b46bdf8c05" prot="protected" virt="non-virtual"><scope>state_observer::StateObserver</scope><name>D_</name></member>
      <member refid="classstate__observer_1_1StateObserver_1a2eb5e2ed964d80974046edc36444e818" prot="protected" virt="non-virtual"><scope>state_observer::StateObserver</scope><name>dimensions_check</name></member>
      <member refid="classstate__observer_1_1StateObserver_1ae4f32a27873521e6058caa53de1771b0" prot="public" virt="non-virtual"><scope>state_observer::StateObserver</scope><name>get_A</name></member>
      <member refid="classstate__observer_1_1StateObserver_1a411e66ea4d02a57c2e8af6e7a99b9756" prot="public" virt="non-virtual"><scope>state_observer::StateObserver</scope><name>get_B</name></member>
      <member refid="classstate__observer_1_1StateObserver_1a794bbe83b0a35dd79d1201d3690bff4b" prot="public" virt="non-virtual"><scope>state_observer::StateObserver</scope><name>get_C</name></member>
      <member refid="classstate__observer_1_1StateObserver_1a7137173a3e445f8f5dfaea0690641158" prot="public" virt="non-virtual"><scope>state_observer::StateObserver</scope><name>get_D</name></member>
      <member refid="classstate__observer_1_1StateObserver_1a799b4a02f065423beb563700ea6d9ed4" prot="public" virt="non-virtual"><scope>state_observer::StateObserver</scope><name>get_initial_state</name></member>
      <member refid="classstate__observer_1_1StateObserver_1a65034cb07db2a389bdcff3eaf4c6fa6f" prot="public" virt="non-virtual"><scope>state_observer::StateObserver</scope><name>get_output</name></member>
      <member refid="classstate__observer_1_1StateObserver_1ac9bce8f25518d27fe05e5a76b024892f" prot="public" virt="non-virtual"><scope>state_observer::StateObserver</scope><name>get_state</name></member>
      <member refid="classstate__observer_1_1StateObserver_1aabe418247e711fa2d375f602dc5b6dc2" prot="public" virt="virtual"><scope>state_observer::StateObserver</scope><name>get_state_variance</name></member>
      <member refid="classstate__observer_1_1StateObserver_1ac3ae192893b2899e47dcf6a572924dc1" prot="public" virt="non-virtual"><scope>state_observer::StateObserver</scope><name>initialize</name></member>
      <member refid="classstate__observer_1_1StateObserver_1a3723847df0f121e25d0042438c7125c0" prot="protected" virt="non-virtual"><scope>state_observer::StateObserver</scope><name>initialized_</name></member>
      <member refid="classstate__observer_1_1StateObserver_1aa25df9ccd2ebf9c553455d1116efb1e4" prot="public" virt="non-virtual"><scope>state_observer::StateObserver</scope><name>is_initialized</name></member>
      <member refid="classstate__observer_1_1StateObserver_1ac6328e22b68efe1f038d7d275aabe0f1" prot="public" virt="virtual"><scope>state_observer::StateObserver</scope><name>open_loop_update</name></member>
      <member refid="classstate__observer_1_1StateObserver_1a862bfeb79def6189ad6446dd023781a8" prot="public" virt="virtual"><scope>state_observer::StateObserver</scope><name>set_parameters</name></member>
      <member refid="classstate__observer_1_1StateObserver_1ab6e27d39c167150821b7cdfb543e06db" prot="public" virt="non-virtual"><scope>state_observer::StateObserver</scope><name>set_state_transition_matrix</name></member>
      <member refid="classstate__observer_1_1StateObserver_1af7f4758be22113043bcf627614c72b2c" prot="public" virt="non-virtual"><scope>state_observer::StateObserver</scope><name>StateObserver</name></member>
      <member refid="classstate__observer_1_1StateObserver_1af264a05c2165ad46ac0a791fc0d81345" prot="public" virt="non-virtual"><scope>state_observer::StateObserver</scope><name>StateObserver</name></member>
      <member refid="classstate__observer_1_1StateObserver_1ab7c5cc9c2fe24acf92f418d698f1e080" prot="public" virt="non-virtual"><scope>state_observer::StateObserver</scope><name>StateObserver</name></member>
      <member refid="classstate__observer_1_1StateObserver_1aaa7ed3fc92876429b6b91ce90e42b9d6" prot="public" virt="non-virtual"><scope>state_observer::StateObserver</scope><name>StateObserver</name></member>
      <member refid="classstate__observer_1_1StateObserver_1a07062cefef35b9ec7bf7fc812e82e826" prot="public" virt="pure-virtual"><scope>state_observer::StateObserver</scope><name>update</name></member>
      <member refid="classstate__observer_1_1StateObserver_1ab3bf488d4abc29ad203d5a566018aabd" prot="public" virt="pure-virtual"><scope>state_observer::StateObserver</scope><name>update</name></member>
      <member refid="classstate__observer_1_1StateObserver_1a231625c9e7ceb8b5b43b97470c27a29e" prot="protected" virt="non-virtual"><scope>state_observer::StateObserver</scope><name>x_</name></member>
      <member refid="classstate__observer_1_1StateObserver_1a5b4446347b32faad520b80620b98c542" prot="protected" virt="non-virtual"><scope>state_observer::StateObserver</scope><name>y_</name></member>
      <member refid="classstate__observer_1_1StateObserver_1a528b2c8fda31403a5de854f06b423498" prot="public" virt="non-virtual"><scope>state_observer::StateObserver</scope><name>~StateObserver</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
