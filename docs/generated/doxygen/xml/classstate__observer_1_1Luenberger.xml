<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="classstate__observer_1_1Luenberger" kind="class" language="C++" prot="public">
    <compoundname>state_observer::Luenberger</compoundname>
    <basecompoundref refid="classstate__observer_1_1StateObserver" prot="public" virt="non-virtual">state_observer::StateObserver</basecompoundref>
    <includes refid="luenberger_8hpp" local="no">luenberger.hpp</includes>
      <sectiondef kind="protected-attrib">
      <memberdef kind="variable" id="classstate__observer_1_1Luenberger_1ae977cce9e800e6efcecd14b5f35c7a78" prot="protected" static="no" mutable="no">
        <type>Eigen::VectorXd</type>
        <definition>Eigen::VectorXd state_observer::Luenberger::L_</definition>
        <argsstring></argsstring>
        <name>L_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/state_observers/luenberger.hpp" line="134" column="19" bodyfile="include/state_observers/luenberger.hpp" bodystart="134" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classstate__observer_1_1Luenberger_1a16929984163b7f47e97db1d070f290ce" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>state_observer::Luenberger::Luenberger</definition>
        <argsstring>(const Eigen::MatrixXd &amp;A, const Eigen::MatrixXd &amp;B, const Eigen::MatrixXd &amp;C, const Eigen::MatrixXd &amp;D, const Eigen::VectorXd &amp;initial_state, const Eigen::MatrixXd &amp;L)</argsstring>
        <name>Luenberger</name>
        <param>
          <type>const Eigen::MatrixXd &amp;</type>
          <declname>A</declname>
        </param>
        <param>
          <type>const Eigen::MatrixXd &amp;</type>
          <declname>B</declname>
        </param>
        <param>
          <type>const Eigen::MatrixXd &amp;</type>
          <declname>C</declname>
        </param>
        <param>
          <type>const Eigen::MatrixXd &amp;</type>
          <declname>D</declname>
        </param>
        <param>
          <type>const Eigen::VectorXd &amp;</type>
          <declname>initial_state</declname>
        </param>
        <param>
          <type>const Eigen::MatrixXd &amp;</type>
          <declname>L</declname>
        </param>
        <briefdescription>
<para>Constructor with full state-space matrices, initial state, and observer gain. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>A</parametername>
</parameternamelist>
<parameterdescription>
<para>State transition matrix (n x n). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>B</parametername>
</parameternamelist>
<parameterdescription>
<para>Input matrix (n x p). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>C</parametername>
</parameternamelist>
<parameterdescription>
<para>Output matrix (q x n). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>D</parametername>
</parameternamelist>
<parameterdescription>
<para>Feedthrough matrix (q x p). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>initial_state</parametername>
</parameternamelist>
<parameterdescription>
<para>Initial state vector (n x 1). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>L</parametername>
</parameternamelist>
<parameterdescription>
<para>Observer gain matrix (n x q).</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>std::invalid_argument</parametername>
</parameternamelist>
<parameterdescription>
<para>if dimensions are inconsistent. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/state_observers/luenberger.hpp" line="48" column="3"/>
      </memberdef>
      <memberdef kind="function" id="classstate__observer_1_1Luenberger_1abae9eae252eb9b3755290387fd3ed66b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>state_observer::Luenberger::Luenberger</definition>
        <argsstring>(const Eigen::MatrixXd &amp;A, const Eigen::MatrixXd &amp;B, const Eigen::MatrixXd &amp;C, const Eigen::VectorXd &amp;initial_state, const Eigen::MatrixXd &amp;L)</argsstring>
        <name>Luenberger</name>
        <param>
          <type>const Eigen::MatrixXd &amp;</type>
          <declname>A</declname>
        </param>
        <param>
          <type>const Eigen::MatrixXd &amp;</type>
          <declname>B</declname>
        </param>
        <param>
          <type>const Eigen::MatrixXd &amp;</type>
          <declname>C</declname>
        </param>
        <param>
          <type>const Eigen::VectorXd &amp;</type>
          <declname>initial_state</declname>
        </param>
        <param>
          <type>const Eigen::MatrixXd &amp;</type>
          <declname>L</declname>
        </param>
        <briefdescription>
<para>Constructor without feedthrough matrix D. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>A</parametername>
</parameternamelist>
<parameterdescription>
<para>State transition matrix (n x n). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>B</parametername>
</parameternamelist>
<parameterdescription>
<para>Input matrix (n x p). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>C</parametername>
</parameternamelist>
<parameterdescription>
<para>Output matrix (q x n). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>initial_state</parametername>
</parameternamelist>
<parameterdescription>
<para>Initial state vector (n x 1). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>L</parametername>
</parameternamelist>
<parameterdescription>
<para>Observer gain matrix (n x q).</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>std::invalid_argument</parametername>
</parameternamelist>
<parameterdescription>
<para>if dimensions are inconsistent. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/state_observers/luenberger.hpp" line="65" column="3"/>
      </memberdef>
      <memberdef kind="function" id="classstate__observer_1_1Luenberger_1a4493b2461f323dafb197ac4fcd1f88c0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>state_observer::Luenberger::Luenberger</definition>
        <argsstring>(const Eigen::MatrixXd &amp;A, const Eigen::MatrixXd &amp;B, const Eigen::MatrixXd &amp;C, const Eigen::MatrixXd &amp;L)</argsstring>
        <name>Luenberger</name>
        <param>
          <type>const Eigen::MatrixXd &amp;</type>
          <declname>A</declname>
        </param>
        <param>
          <type>const Eigen::MatrixXd &amp;</type>
          <declname>B</declname>
        </param>
        <param>
          <type>const Eigen::MatrixXd &amp;</type>
          <declname>C</declname>
        </param>
        <param>
          <type>const Eigen::MatrixXd &amp;</type>
          <declname>L</declname>
        </param>
        <briefdescription>
<para>Constructor without initial state and feedthrough matrix D. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>A</parametername>
</parameternamelist>
<parameterdescription>
<para>State transition matrix (n x n). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>B</parametername>
</parameternamelist>
<parameterdescription>
<para>Input matrix (n x p). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>C</parametername>
</parameternamelist>
<parameterdescription>
<para>Output matrix (q x n). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>L</parametername>
</parameternamelist>
<parameterdescription>
<para>Observer gain matrix (n x q).</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>std::invalid_argument</parametername>
</parameternamelist>
<parameterdescription>
<para>if dimensions are inconsistent. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/state_observers/luenberger.hpp" line="81" column="3"/>
      </memberdef>
      <memberdef kind="function" id="classstate__observer_1_1Luenberger_1abe60dea3226dd881e2df2f4a1cea4a49" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>state_observer::Luenberger::Luenberger</definition>
        <argsstring>()</argsstring>
        <name>Luenberger</name>
        <briefdescription>
<para>Default constructor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/state_observers/luenberger.hpp" line="89" column="3" bodyfile="include/state_observers/luenberger.hpp" bodystart="89" bodyend="89"/>
      </memberdef>
      <memberdef kind="function" id="classstate__observer_1_1Luenberger_1abee2fc506b66688f26ace1f4ef756f49" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>state_observer::Luenberger::~Luenberger</definition>
        <argsstring>()</argsstring>
        <name>~Luenberger</name>
        <briefdescription>
<para>Destructor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/state_observers/luenberger.hpp" line="94" column="3" bodyfile="include/state_observers/luenberger.hpp" bodystart="94" bodyend="94"/>
      </memberdef>
      <memberdef kind="function" id="classstate__observer_1_1Luenberger_1a990ad8246d6da844e8facd76bac5d948" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void state_observer::Luenberger::set_parameters</definition>
        <argsstring>(const StateObserverParam::SharedPtr state_observer_params) override</argsstring>
        <name>set_parameters</name>
        <reimplements refid="classstate__observer_1_1StateObserver_1a862bfeb79def6189ad6446dd023781a8">set_parameters</reimplements>
        <param>
          <type>const StateObserverParam::SharedPtr</type>
          <declname>state_observer_params</declname>
        </param>
        <briefdescription>
<para>Set the parameters of the <ref refid="classstate__observer_1_1Luenberger" kindref="compound">Luenberger</ref> observer. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>state_observer_params</parametername>
</parameternamelist>
<parameterdescription>
<para>Shared pointer to <computeroutput><ref refid="classstate__observer_1_1StateObserverParam" kindref="compound">StateObserverParam</ref></computeroutput>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/state_observers/luenberger.hpp" line="101" column="8"/>
      </memberdef>
      <memberdef kind="function" id="classstate__observer_1_1Luenberger_1ab46f7f08840c4688ef9d1e992fadea73" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void state_observer::Luenberger::set_observer_gain</definition>
        <argsstring>(const Eigen::MatrixXd &amp;L)</argsstring>
        <name>set_observer_gain</name>
        <param>
          <type>const Eigen::MatrixXd &amp;</type>
          <declname>L</declname>
        </param>
        <briefdescription>
<para>Set the observer gain matrix <computeroutput>L</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>L</parametername>
</parameternamelist>
<parameterdescription>
<para>New observer gain matrix (n x q).</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>std::invalid_argument</parametername>
</parameternamelist>
<parameterdescription>
<para>if dimensions are incorrect. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/state_observers/luenberger.hpp" line="110" column="8"/>
      </memberdef>
      <memberdef kind="function" id="classstate__observer_1_1Luenberger_1aeef08b1e109c369246e440f7bf92f3e2" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>Eigen::MatrixXd</type>
        <definition>Eigen::MatrixXd state_observer::Luenberger::update</definition>
        <argsstring>(const Eigen::VectorXd &amp;measurement) override</argsstring>
        <name>update</name>
        <reimplements refid="classstate__observer_1_1StateObserver_1a07062cefef35b9ec7bf7fc812e82e826">update</reimplements>
        <param>
          <type>const Eigen::VectorXd &amp;</type>
          <declname>measurement</declname>
        </param>
        <briefdescription>
<para>Update the observer with a measurement. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>measurement</parametername>
</parameternamelist>
<parameterdescription>
<para>Measurement vector (q x 1). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Updated state estimate. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/state_observers/luenberger.hpp" line="118" column="19"/>
      </memberdef>
      <memberdef kind="function" id="classstate__observer_1_1Luenberger_1ad514f468dbfa4e073232e1438c55176a" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>Eigen::MatrixXd</type>
        <definition>Eigen::MatrixXd state_observer::Luenberger::update</definition>
        <argsstring>(const Eigen::VectorXd &amp;measurement, const Eigen::VectorXd &amp;input) override</argsstring>
        <name>update</name>
        <reimplements refid="classstate__observer_1_1StateObserver_1ab3bf488d4abc29ad203d5a566018aabd">update</reimplements>
        <param>
          <type>const Eigen::VectorXd &amp;</type>
          <declname>measurement</declname>
        </param>
        <param>
          <type>const Eigen::VectorXd &amp;</type>
          <declname>input</declname>
        </param>
        <briefdescription>
<para>Update the observer with a measurement and input. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>measurement</parametername>
</parameternamelist>
<parameterdescription>
<para>Measurement vector (q x 1). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>input</parametername>
</parameternamelist>
<parameterdescription>
<para>Input vector (p x 1). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Updated state estimate. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/state_observers/luenberger.hpp" line="127" column="19"/>
      </memberdef>
      <memberdef kind="function" id="classstate__observer_1_1Luenberger_1aa9699252ab80e57cf01a516770dbb8c4" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>Eigen::MatrixXd</type>
        <definition>Eigen::MatrixXd state_observer::Luenberger::get_observer_gain</definition>
        <argsstring>() const</argsstring>
        <name>get_observer_gain</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/state_observers/luenberger.hpp" line="131" column="26" bodyfile="include/state_observers/luenberger.hpp" bodystart="131" bodyend="131"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Implementation of a <ref refid="classstate__observer_1_1Luenberger" kindref="compound">Luenberger</ref> observer for linear systems. </para>
    </briefdescription>
    <detaileddescription>
<para>The <computeroutput><ref refid="classstate__observer_1_1Luenberger" kindref="compound">Luenberger</ref></computeroutput> class extends the <computeroutput><ref refid="classstate__observer_1_1StateObserver" kindref="compound">StateObserver</ref></computeroutput> base class to provide a <ref refid="classstate__observer_1_1Luenberger" kindref="compound">Luenberger</ref> observer, which estimates the state of a linear system using a specified observer gain matrix <computeroutput>L</computeroutput>. </para>
    </detaileddescription>
    <inheritancegraph>
      <node id="1">
        <label>state_observer::Luenberger</label>
        <link refid="classstate__observer_1_1Luenberger"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>state_observer::StateObserver</label>
        <link refid="classstate__observer_1_1StateObserver"/>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="1">
        <label>state_observer::Luenberger</label>
        <link refid="classstate__observer_1_1Luenberger"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>state_observer::StateObserver</label>
        <link refid="classstate__observer_1_1StateObserver"/>
      </node>
    </collaborationgraph>
    <location file="include/state_observers/luenberger.hpp" line="33" column="1" bodyfile="include/state_observers/luenberger.hpp" bodystart="34" bodyend="135"/>
    <listofallmembers>
      <member refid="classstate__observer_1_1StateObserver_1af3f080b718a6ef61a64c7e862048c44f" prot="protected" virt="non-virtual"><scope>state_observer::Luenberger</scope><name>A_</name></member>
      <member refid="classstate__observer_1_1StateObserver_1a09055e588ba4c8f22db835009438aa77" prot="protected" virt="non-virtual"><scope>state_observer::Luenberger</scope><name>B_</name></member>
      <member refid="classstate__observer_1_1StateObserver_1a308ca363bbc642804080ffdd82838b2d" prot="protected" virt="non-virtual"><scope>state_observer::Luenberger</scope><name>C_</name></member>
      <member refid="classstate__observer_1_1StateObserver_1a0cfe3e7379d3b3750f9d00b46bdf8c05" prot="protected" virt="non-virtual"><scope>state_observer::Luenberger</scope><name>D_</name></member>
      <member refid="classstate__observer_1_1StateObserver_1a2eb5e2ed964d80974046edc36444e818" prot="protected" virt="non-virtual"><scope>state_observer::Luenberger</scope><name>dimensions_check</name></member>
      <member refid="classstate__observer_1_1StateObserver_1ae4f32a27873521e6058caa53de1771b0" prot="public" virt="non-virtual"><scope>state_observer::Luenberger</scope><name>get_A</name></member>
      <member refid="classstate__observer_1_1StateObserver_1a411e66ea4d02a57c2e8af6e7a99b9756" prot="public" virt="non-virtual"><scope>state_observer::Luenberger</scope><name>get_B</name></member>
      <member refid="classstate__observer_1_1StateObserver_1a794bbe83b0a35dd79d1201d3690bff4b" prot="public" virt="non-virtual"><scope>state_observer::Luenberger</scope><name>get_C</name></member>
      <member refid="classstate__observer_1_1StateObserver_1a7137173a3e445f8f5dfaea0690641158" prot="public" virt="non-virtual"><scope>state_observer::Luenberger</scope><name>get_D</name></member>
      <member refid="classstate__observer_1_1StateObserver_1a799b4a02f065423beb563700ea6d9ed4" prot="public" virt="non-virtual"><scope>state_observer::Luenberger</scope><name>get_initial_state</name></member>
      <member refid="classstate__observer_1_1Luenberger_1aa9699252ab80e57cf01a516770dbb8c4" prot="public" virt="non-virtual"><scope>state_observer::Luenberger</scope><name>get_observer_gain</name></member>
      <member refid="classstate__observer_1_1StateObserver_1a65034cb07db2a389bdcff3eaf4c6fa6f" prot="public" virt="non-virtual"><scope>state_observer::Luenberger</scope><name>get_output</name></member>
      <member refid="classstate__observer_1_1StateObserver_1ac9bce8f25518d27fe05e5a76b024892f" prot="public" virt="non-virtual"><scope>state_observer::Luenberger</scope><name>get_state</name></member>
      <member refid="classstate__observer_1_1StateObserver_1aabe418247e711fa2d375f602dc5b6dc2" prot="public" virt="virtual"><scope>state_observer::Luenberger</scope><name>get_state_variance</name></member>
      <member refid="classstate__observer_1_1StateObserver_1ac3ae192893b2899e47dcf6a572924dc1" prot="public" virt="non-virtual"><scope>state_observer::Luenberger</scope><name>initialize</name></member>
      <member refid="classstate__observer_1_1StateObserver_1a3723847df0f121e25d0042438c7125c0" prot="protected" virt="non-virtual"><scope>state_observer::Luenberger</scope><name>initialized_</name></member>
      <member refid="classstate__observer_1_1StateObserver_1aa25df9ccd2ebf9c553455d1116efb1e4" prot="public" virt="non-virtual"><scope>state_observer::Luenberger</scope><name>is_initialized</name></member>
      <member refid="classstate__observer_1_1Luenberger_1ae977cce9e800e6efcecd14b5f35c7a78" prot="protected" virt="non-virtual"><scope>state_observer::Luenberger</scope><name>L_</name></member>
      <member refid="classstate__observer_1_1Luenberger_1a16929984163b7f47e97db1d070f290ce" prot="public" virt="non-virtual"><scope>state_observer::Luenberger</scope><name>Luenberger</name></member>
      <member refid="classstate__observer_1_1Luenberger_1abae9eae252eb9b3755290387fd3ed66b" prot="public" virt="non-virtual"><scope>state_observer::Luenberger</scope><name>Luenberger</name></member>
      <member refid="classstate__observer_1_1Luenberger_1a4493b2461f323dafb197ac4fcd1f88c0" prot="public" virt="non-virtual"><scope>state_observer::Luenberger</scope><name>Luenberger</name></member>
      <member refid="classstate__observer_1_1Luenberger_1abe60dea3226dd881e2df2f4a1cea4a49" prot="public" virt="non-virtual"><scope>state_observer::Luenberger</scope><name>Luenberger</name></member>
      <member refid="classstate__observer_1_1StateObserver_1ac6328e22b68efe1f038d7d275aabe0f1" prot="public" virt="virtual"><scope>state_observer::Luenberger</scope><name>open_loop_update</name></member>
      <member refid="classstate__observer_1_1Luenberger_1ab46f7f08840c4688ef9d1e992fadea73" prot="public" virt="non-virtual"><scope>state_observer::Luenberger</scope><name>set_observer_gain</name></member>
      <member refid="classstate__observer_1_1Luenberger_1a990ad8246d6da844e8facd76bac5d948" prot="public" virt="virtual"><scope>state_observer::Luenberger</scope><name>set_parameters</name></member>
      <member refid="classstate__observer_1_1StateObserver_1ab6e27d39c167150821b7cdfb543e06db" prot="public" virt="non-virtual"><scope>state_observer::Luenberger</scope><name>set_state_transition_matrix</name></member>
      <member refid="classstate__observer_1_1StateObserver_1af7f4758be22113043bcf627614c72b2c" prot="public" virt="non-virtual"><scope>state_observer::Luenberger</scope><name>StateObserver</name></member>
      <member refid="classstate__observer_1_1StateObserver_1af264a05c2165ad46ac0a791fc0d81345" prot="public" virt="non-virtual"><scope>state_observer::Luenberger</scope><name>StateObserver</name></member>
      <member refid="classstate__observer_1_1StateObserver_1ab7c5cc9c2fe24acf92f418d698f1e080" prot="public" virt="non-virtual"><scope>state_observer::Luenberger</scope><name>StateObserver</name></member>
      <member refid="classstate__observer_1_1StateObserver_1aaa7ed3fc92876429b6b91ce90e42b9d6" prot="public" virt="non-virtual"><scope>state_observer::Luenberger</scope><name>StateObserver</name></member>
      <member refid="classstate__observer_1_1Luenberger_1aeef08b1e109c369246e440f7bf92f3e2" prot="public" virt="virtual"><scope>state_observer::Luenberger</scope><name>update</name></member>
      <member refid="classstate__observer_1_1Luenberger_1ad514f468dbfa4e073232e1438c55176a" prot="public" virt="virtual"><scope>state_observer::Luenberger</scope><name>update</name></member>
      <member refid="classstate__observer_1_1StateObserver_1a231625c9e7ceb8b5b43b97470c27a29e" prot="protected" virt="non-virtual"><scope>state_observer::Luenberger</scope><name>x_</name></member>
      <member refid="classstate__observer_1_1StateObserver_1a5b4446347b32faad520b80620b98c542" prot="protected" virt="non-virtual"><scope>state_observer::Luenberger</scope><name>y_</name></member>
      <member refid="classstate__observer_1_1Luenberger_1abee2fc506b66688f26ace1f4ef756f49" prot="public" virt="non-virtual"><scope>state_observer::Luenberger</scope><name>~Luenberger</name></member>
      <member refid="classstate__observer_1_1StateObserver_1a528b2c8fda31403a5de854f06b423498" prot="public" virt="non-virtual"><scope>state_observer::Luenberger</scope><name>~StateObserver</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
